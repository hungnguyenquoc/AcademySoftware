// <auto-generated />
using System;
using Academy.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Academy.API.Migrations
{
    [DbContext(typeof(AcademyDbContext))]
    [Migration("20191119094844_UpdateUser")]
    partial class UpdateUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Academy.API.Models.BookingCourse", b =>
                {
                    b.Property<int>("Book_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Book_CodeDiscount")
                        .HasMaxLength(100);

                    b.Property<string>("Book_Email")
                        .HasMaxLength(100);

                    b.Property<string>("Book_Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Book_Phone")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeyword");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(256);

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(256);

                    b.Property<bool>("Status");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Book_ID");

                    b.ToTable("BookingCourses");
                });

            modelBuilder.Entity("Academy.API.Models.BookingDetail", b =>
                {
                    b.Property<int>("BookDetail_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Book_ID");

                    b.Property<int>("Cou_ID");

                    b.Property<int>("Quantity");

                    b.HasKey("BookDetail_ID");

                    b.HasIndex("Book_ID");

                    b.HasIndex("Cou_ID");

                    b.ToTable("BookingDetails");
                });

            modelBuilder.Entity("Academy.API.Models.Course", b =>
                {
                    b.Property<int>("Cou_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID");

                    b.Property<string>("Cou_Alias")
                        .HasMaxLength(256);

                    b.Property<string>("Cou_Content");

                    b.Property<string>("Cou_Description")
                        .HasMaxLength(256);

                    b.Property<string>("Cou_Image")
                        .HasMaxLength(256);

                    b.Property<string>("Cou_MoreImages")
                        .HasColumnType("xml");

                    b.Property<string>("Cou_Name")
                        .HasMaxLength(256);

                    b.Property<decimal>("Cou_Price");

                    b.Property<decimal>("Cou_PromotionPrice");

                    b.Property<int?>("Cou_ViewCount");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeyword");

                    b.Property<int>("Re_ID");

                    b.Property<bool>("Status");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Cou_ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("Re_ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Academy.API.Models.CourseCategory", b =>
                {
                    b.Property<int>("Cate_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cate_Alias")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Cate_Description")
                        .HasMaxLength(500);

                    b.Property<string>("Cate_Image")
                        .HasMaxLength(256);

                    b.Property<string>("Cate_Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeyword");

                    b.Property<bool>("Status");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Cate_ID");

                    b.ToTable("CourseCategories");
                });

            modelBuilder.Entity("Academy.API.Models.OpenRegister", b =>
                {
                    b.Property<int>("Re_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeyword");

                    b.Property<string>("Re_Name")
                        .HasMaxLength(256);

                    b.Property<bool>("Status");

                    b.Property<DateTime>("Time_End");

                    b.Property<DateTime>("Time_Start");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Re_ID");

                    b.ToTable("OpenRegisters");
                });

            modelBuilder.Entity("Academy.API.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<bool>("IsMain");

                    b.Property<string>("PublicId");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Academy.API.Models.Post", b =>
                {
                    b.Property<int>("Post_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeyword");

                    b.Property<string>("Post_Content");

                    b.Property<string>("Post_Image")
                        .HasMaxLength(256);

                    b.Property<string>("Post_Name")
                        .HasMaxLength(256);

                    b.Property<bool>("Status");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Post_ID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Academy.API.Models.ProductTag", b =>
                {
                    b.Property<int>("ProductTag_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cou_ID");

                    b.Property<string>("Tag_ID")
                        .HasMaxLength(50);

                    b.HasKey("ProductTag_ID");

                    b.HasIndex("Cou_ID");

                    b.HasIndex("Tag_ID");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("Academy.API.Models.Tag", b =>
                {
                    b.Property<string>("Tag_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Tag_Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Tag_Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Tag_ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Academy.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Gender");

                    b.Property<string>("Interests");

                    b.Property<string>("Introduction");

                    b.Property<string>("KnownAs");

                    b.Property<DateTime>("LastActive");

                    b.Property<string>("LookingFor");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Academy.API.Models.Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("Academy.API.Models.BookingDetail", b =>
                {
                    b.HasOne("Academy.API.Models.BookingCourse", "BookingCourse")
                        .WithMany("BookingDetails")
                        .HasForeignKey("Book_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Academy.API.Models.Course", "Course")
                        .WithMany("BookingDetails")
                        .HasForeignKey("Cou_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Academy.API.Models.Course", b =>
                {
                    b.HasOne("Academy.API.Models.CourseCategory", "CourseCategory")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Academy.API.Models.OpenRegister", "OpenRegister")
                        .WithMany("Courses")
                        .HasForeignKey("Re_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Academy.API.Models.Photo", b =>
                {
                    b.HasOne("Academy.API.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Academy.API.Models.ProductTag", b =>
                {
                    b.HasOne("Academy.API.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("Cou_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Academy.API.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("Tag_ID");
                });
#pragma warning restore 612, 618
        }
    }
}
